// Generated by CoffeeScript 1.4.0
(function() {
  var cohers, geojson, url;

  url = require('url');

  geojson = require('./geojson');

  cohers = function(v) {
    if (!Number.isNaN(Number(v))) {
      return Number(v);
    }
    if (v === "true") {
      return true;
    }
    if (v === "false") {
      return false;
    }
    if (!Number.isNaN(Date.parse(v))) {
      return new Date(v);
    }
    return v;
  };

  module.exports = function(srvc) {
    var getGeo, getGeoJson, postGeoByGetParam, postGeoJson, postGeoJsonByGet, postGeos, postGeosByGet, queryGeoJson, queryGeos, _idGeo, _newGeo, _newGeos, _queryGeos;
    _newGeos = function(geos, res, next) {
      var _this = this;
      return srvc.createGeos(geos, function(errs, geos) {
        if (errs != null) {
          return next(errs);
        }
        return res.end();
      });
    };
    _newGeo = function(geo, res, next) {
      var _this = this;
      return srvc.createGeo(geo, function(err, geo) {
        if (err != null) {
          return next(err);
        }
        return res.end();
      });
    };
    postGeos = function(req, res, next) {
      var json;
      json = req.body;
      return (json instanceof Array ? _newGeos.bind(void 0, json) : _newGeo.bind(void 0, json))(res, next);
    };
    postGeosByGet = function(req, res, next) {
      req.body = JSON.parse(url.parse(req.url, true).query.json);
      return createGeos(req, res, next);
    };
    postGeoJson = function(req, res, next) {
      var geoJson, json;
      json = req.body;
      return (json.type === 'FeatureCollection' ? _newGeos.bind(void 0, (function() {
        var _i, _len, _ref, _results;
        _ref = json.features;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          geoJson = _ref[_i];
          _results.push(geojson.toGeo(geoJson));
        }
        return _results;
      })()) : _newGeo.bind(void 0, geojson.toGeo(json)))(res, next);
    };
    postGeoJsonByGet = function(req, res, next) {
      req.body = JSON.parse(url.parse(req.url, true).query.json);
      return postGeoJson(req, res, next);
    };
    postGeoByGetParam = function(req, res, next) {
      var k, lat, lng, meta, parts, v, _ref, _ref1;
      parts = url.parse(req.url, true);
      meta = {};
      _ref = parts.query;
      for (k in _ref) {
        v = _ref[k];
        if (!(k === 'lat' || k === 'lng')) {
          meta[k] = cohers(v);
        }
      }
      _ref1 = parts.query, lat = _ref1.lat, lng = _ref1.lng;
      return _newGeo({
        lnglat: [parseFloat(lng), parseFloat(lat)],
        meta: meta
      }, res, next);
    };
    _idGeo = function(convert, req, res, next) {
      return srvc.getGeo(req.params.id, function(err, geo) {
        if (err != null) {
          return next(err);
        }
        return res.jsonp(convert(geo));
      });
    };
    getGeo = _idGeo.bind(void 0, function(x) {
      return x;
    });
    getGeoJson = _idGeo.bind(void 0, geojson.fromGeo);
    _queryGeos = function(convert, req, res, next) {
      var find, limit, parts, sort;
      parts = url.parse(req.url, true);
      if (parts.query.q != null) {
        find = JSON.parse(parts.query.q);
      }
      if (parts.query.sort != null) {
        sort = JSON.parse(parts.query.sort);
      }
      if (parts.query.limit != null) {
        limit = parseInt(parts.query.limit);
      }
      return srvc.getGeos({
        find: find,
        sort: sort,
        limit: limit
      }, function(err, geos) {
        if (err != null) {
          return next(err);
        }
        return res.jsonp(convert(geos));
      });
    };
    queryGeos = _queryGeos.bind(void 0, function(x) {
      return x;
    });
    queryGeoJson = _queryGeos.bind(void 0, geojson.fromGeos);
    return {
      postGeos: postGeos,
      postGeoJson: postGeoJson,
      postGeosByGet: postGeosByGet,
      postGeoJsonByGet: postGeoJsonByGet,
      postGeoByGetParam: postGeoByGetParam,
      getGeo: getGeo,
      getGeoJson: getGeoJson,
      queryGeos: queryGeos,
      queryGeoJson: queryGeoJson
    };
  };

}).call(this);
