// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, GeoSchema, MongoService, docToGeo, geoToDoc, mongoose,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  mongoose = require('mongoose');

  GeoSchema = new mongoose.Schema({
    type: String,
    lnglats: [],
    created: {
      type: Date,
      "default": Date.now
    },
    meta: {}
  });

  docToGeo = function(doc) {
    return {
      type: doc.type,
      lnglats: doc.lnglats,
      meta: doc.meta,
      created: doc.created
    };
  };

  geoToDoc = function(geo) {
    return {
      type: geo.type,
      lnglats: geo.lnglats,
      meta: geo.meta
    };
  };

  MongoService = (function(_super) {

    __extends(MongoService, _super);

    function MongoService(db, collectionName) {
      this.db = db;
      this.Geo = this.db.model(collectionName, GeoSchema);
    }

    MongoService.prototype.createGeo = function(geo, callback) {
      var _this = this;
      return new this.Geo(geoToDoc(geo)).save(function(err, doc) {
        geo = docToGeo(doc);
        if (callback != null) {
          callback(err, geo);
        }
        if (!(err != null)) {
          return _this.emit('new geo', geo);
        }
      });
    };

    MongoService.prototype.createGeos = function(geos, callback) {
      var errs, geo, result, _i, _len, _results,
        _this = this;
      result = [];
      errs = void 0;
      _results = [];
      for (_i = 0, _len = geos.length; _i < _len; _i++) {
        geo = geos[_i];
        _results.push(new this.Geo(geoToDoc(geo)).save(function(err, doc) {
          geo = result.push((doc != null ? docToGeo(doc) : void 0));
          if (!(err != null) && (geo != null)) {
            _this.emit('new geo', geo);
          }
          if (err != null) {
            if (errs != null) {
              errs.push(err);
            } else {
              errs = [err];
            }
          }
          if (result.length === geos.length && (callback != null)) {
            return callback(errs, result);
          }
        }));
      }
      return _results;
    };

    MongoService.prototype.getGeo = function(id, callback) {
      return this.Geo.findById(id, function(err, doc) {
        return callback(err, docToGeo(doc));
      });
    };

    MongoService.prototype.getGeos = function(opt, callback) {
      var find, limit, q, sort;
      if (opt != null) {
        find = opt.find, sort = opt.sort, limit = opt.limit;
      }
      q = this.Geo.find(find);
      q = q.sort((sort != null ? sort : 'created'));
      if (limit != null) {
        q = q.limit(limit);
      }
      return q.exec(function(err, docs) {
        var doc;
        return callback(err, (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            _results.push(docToGeo(doc));
          }
          return _results;
        })());
      });
    };

    return MongoService;

  })(EventEmitter);

  module.exports = function(opt) {
    var collectionName, db, url;
    if (typeof opt === 'string') {
      url = opt;
    } else {
      url = opt.url, db = opt.db, collectionName = opt.collectionName;
    }
    if (db == null) {
      db = mongoose.connect(url);
    }
    if (collectionName == null) {
      collectionName = 'geo';
    }
    return new MongoService(db, collectionName);
  };

}).call(this);
